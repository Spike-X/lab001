server:
  port: 8081
  tomcat:
    threads:
      min-spare: 10
      #最大线程数
      max: 200
    #最大连接数
    max-connections: 8192
    connection-timeout: 5000ms

management:
  endpoints:
    web:
      exposure:
        include: "*"
  endpoint:
    health:
      show-details: always

knife4j:
  enable: true
  production: false
  setting:
    enableHost: false
    enableHostText: localhost.tao.com:8081
    enableFooter: false
    enableFooterCustom: true
    footerCustomContent: Apache License 2.0 | Copyright (c) 2021 [浙江一菜刀股份有限公司](https://gitee.com/xiaoym/knife4j)

spring:
  servlet:
    multipart:
      enabled: true
      max-file-size: 10MB
      max-request-size: 100MB
      #Multipart（form-data）
      location: D:\\temp

  redis:
    host: 192.168.1.128
    port: 6379
    password: spike-x
    database: 0
    #连接超时时间（毫秒）
    timeout: 1200
    lettuce:
      pool:
        #连接池最大连接数（使用负值表示没有限制）
        max-active: 8
        #连接池最大阻塞等待时间（使用负值表示没有限制）
        max-wait: -1
        #连接池中的最大空闲连接
        max-idle: 8
        #连接池中的最小空闲连接
        min-idle: 0
        time-between-eviction-runs: 1
    ##https://github.com/redisson/redisson/tree/master/redisson-spring-boot-starter
    redisson:
      config: |
        singleServerConfig:
          idleConnectionTimeout: 10000
          connectTimeout: 10000
          timeout: 3000
          retryAttempts: 3
          retryInterval: 1500
          password: spike-x
          subscriptionsPerConnection: 5
          clientName: null
          address: "redis://192.168.1.128:6379"
          subscriptionConnectionMinimumIdleSize: 1
          subscriptionConnectionPoolSize: 50
          connectionMinimumIdleSize: 24
          connectionPoolSize: 64
          database: 0
          dnsMonitoringInterval: 5000
        threads: 16
        nettyThreads: 32
        codec: !<org.redisson.codec.Kryo5Codec> {}
        transportMode: "NIO"

  datasource:
    druid:
      driver-class-name: com.mysql.cj.jdbc.Driver
      url: jdbc:mysql://192.168.1.128:3306/test1?useUnicode=true&characterEncoding=utf-8&useSSL=false&allowMultiQueries=true&rewriteBatchedStatements=true&serverTimezone=Asia/Shanghai
      #      url: jdbc:mysql://192.168.1.128:3306/test1?useUnicode=true&characterEncoding=utf-8&useSSL=false&rewriteBatchedStatements=true&serverTimezone=Asia/Shanghai
      #      url: jdbc:mysql://192.168.1.128:3306/test1?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=Asia/Shanghai
      username: root
      password: root

  kafka:
    bootstrap-servers: 10.41.96.99:9092,10.41.98.95:9092,10.41.97.129:9092
    template:
      default-topic: T_PARSE_PROD
    listener:
      ack-mode: manual
    producer:
      acks: 1
      #重试次数，0为不启用重试机制
      retries: 0
      #控制批处理大小，单位为字节
      batch-size: 16384
      #生产者可以使用的总内存字节来缓冲等待发送到服务器的记录
      buffer-memory: 33554432
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
      properties:
        #批量发送，延迟为1毫秒，启用该功能能有效减少生产者发送消息次数，从而提高并发量
        linger:
          ms: 5
        security.protocol: SASL_PLAINTEXT
        sasl:
          mechanism: PLAIN
          jaas:
            config: org.apache.kafka.common.security.plain.PlainLoginModule required username="com.tao.tools" password="R*nZZuhAOZior5kEFpz5Jr53Uxav1Jcv!P$XxF7~+h)GRn[h+BW1584607039062";
    consumer:
      group-id: com_tao-T_PARSE_PROD-parser_group
      #是否自动提交offset偏移量(默认true)
      enable-auto-commit: false
      #offset偏移量规则设置
      auto-offset-reset: earliest
      #一次调用poll()操作时返回的最大记录数，默认值为500
      max-poll-records: 5
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      properties:
        partition:
          assignment:
            strategy: org.apache.kafka.clients.consumer.RoundRobinAssignor
        security.protocol: SASL_PLAINTEXT
        sasl:
          mechanism: PLAIN
          jaas:
            config: org.apache.kafka.common.security.plain.PlainLoginModule required username="com.tao.tools" password="R*nZZuhAOZior5kEFpz5Jr53Uxav1Jcv!P$XxF7~+h)GRn[h+BW1584607039062";

  rabbitmq:
    host: 192.168.1.128
    port: 5672
    username: root
    password: root
    virtual-host: /


mybatis-plus:
  mapper-locations:
    - classpath:/com/aircraft/codelab/pioneer/mapper/xml/*.xml
  #  type-aliases-package: com.aircraft.codelab.labcore.pojo.*
  configuration:
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
  #    log-impl: org.apache.ibatis.logging.nologging.NoLoggingImpl
  global-config:
    db-config:
      id-type: assign_id

resilience4j.retry:
  configs:
    default:
      maxAttempts: 3
      waitDuration: 10s  #指定若干时间后重试
      retryExceptions:
        - com.aircraft.codelab.core.exception.ApiException
        - java.util.concurrent.TimeoutException
        - java.io.IOException
  instances:
    backendA:
      baseConfig: default
    backendB:
      baseConfig: default
      waitDuration: 100ms

#logging:
#  config: classpath:log4j2-${spring.profiles.active}.xml

logging:
  config: classpath:logback-spring.xml

app:
  id: lab001
apollo:
  meta: http://127.0.0.1:8080 # Apollo Meta Server 地址
  bootstrap:
    enabled: true # 是否开启 Apollo 配置预加载功能。默认为 false。
    eagerLoad:
      enabled: true # 是否开启 Apollo 支持日志级别的加载时机。默认为 false。
    namespaces: application # 使用的 Apollo 的命名空间，默认为 application。


# 自定义上传的文件目录
file:
  upload-dir: D:\\lab

remote:
  http:
    url: http://localhost:8081/hello

collection:
  bank:
    itemId: 111,222
    itemSize: "{'1111':'0001','2222':'0002'}"
